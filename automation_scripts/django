#!/bin/bash
#echo "cloning fjemal01's NTI-310 GitHub..."
git clone https://github.com/fjemal/NTI-310.git /tmp/NTI-310
git config --global user.name "fjemal"
git config --global user.email "fjemal01@seattlecentral.edu"
echo "Current python version:"

python --version

echo "installing virtualenv so we can give django its own version of python"

# here you can install with updates or without updates.  To install python pip with a full kernel upgrade (not somthing you would do in prod, but
# definately somthing you might do to your testing or staging server: sudo yum update

# for a prod install (no update)

# this adds the noarch release reposatory from the fedora project, wich contains python pip
# python pip is a package manager for python...

sudo rpm -iUvh https://dl.fedoraproject.org/pub/epel/7/x86_64/e/epel-release-7-8.noarch.rpm

sudo yum -y install python-pip

# Now we're installing virtualenv, which will allow us to create a python installation and environment, just for our Django server
sudo pip install virtualenv

cd /opt
# we're going to install our django libs in /opt, often used for optional or add-on.  /usr/local is also a perfectly fine place for new apps
# we want to make this env accisible to the ec2-user at first, because we don't want to have to run it as root.

sudo mkdir django
sudo chown -R fadilj django

sleep 5

cd django
sudo virtualenv django-env

echo "activating virtualenv"

source /opt/django/django-env/bin/activate

echo "to switch out of virtualenv, type deactivate"

echo "now using:"

which python

sudo chown -R fadilj /opt/django

echo "installing django"
 
pip install django


echo "django admin is version:"

django-admin --version

django-admin startproject project1

echo "here's our new django project dir"
sudo yum -y install tree
tree project1

echo "go to https://docs.djangoproject.com/en/1.10/intro/tutorial01/"

sudo pip install virtualenv

#mkdir ~/project1
#cd ~/project1
#virtualenv myprojectenv
#source myprojectenv/bin/activate

sed -i "s,ALLOWED_HOSTS = \[\],ALLOWED_HOSTS = \['*'\],g" /opt/django/project1/project1/settings.py

pip install django psycopg2
django-admin.py startproject project1 .
#edit the following files~/project1/project1/settings.py

#DATABASES = {
 #   'default': {
  #      'ENGINE': 'django.db.backends.postgresql_psycopg2',
   #     'NAME': 'project1',
    #    'USER': 'myprojectuser',
     #   'PASSWORD': 'password',
      #  'HOST': 'localhost',
       # 'PORT': '',
    #}
#}
#configure django database settings
sed -i "s/        'ENGINE': 'django.db.backends.sqlite3',/        'ENGINE': 'django.db.backends.postgresql_psycopg2',/g" /opt/django/project1/project1/settings.py
sed -i "s/        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),/        'NAME': 'project1',/g" /opt/django/project1/project1/settings.py
sed -i 'USER': 'myprojectuser', /opt/django/project1/project1/settings.py
sed -i 'PASSWORD': 'nti310django', /opt/django/project1/project1/settings.py
sed -i 'HOST': '10.128.0.9', /opt/django/project1/project1/settings.py
sed -i 'PORT': '5432', /opt/django/project1/project1/settings.py



cd ~/project1
python manage.py makemigrations
python manage.py migrate
python manage.py createsuperuser

#you can delete the existing superuser and creat yoursso this is valid for every build: 
#echo "from django.contrib.auth.models import User; User.objects.filter(email=fjemal01@seattlecentral.edu').delete(); User.objects.create_superuser('admin@example.com', 'admin', 'nimda')" | python manage.py shell
echo "from django.contrib.auth.models import User; User.objects.create_superuser('fjemal', 'fjemal01@seattlecentral.edu', 'nti310django')" | python manage.py shell

python manage.py runserver 0.0.0.0:8000
#for disallowed host error edit project1/settings.py and add the django ip to ALLOWED_HOST
